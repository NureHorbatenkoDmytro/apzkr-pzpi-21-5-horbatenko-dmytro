Міністерство освіти і науки України
Харківський національний університет радіоелектроніки

Факультет комп’ютерних наук

Кафедра програмної інженерії

КУРСОВА РОБОТА
ПОЯСНЮВАЛЬНА ЗАПИСКА
з навчальної дисципліни «Архітектура програмного забезпечення»
Тема роботи: Програмна система для моніторингу та управлінням мікроклімату для домашніх рослин                                                                                  

Студент гр. ПЗПІ-21-5		 __________________ Горбатенко Д.О.
(підпис)
Керівник роботи 			 __________________ ст.викл. Сокорчук І.П.
(підпис) 
Роботу захищено «__»_________2024 р.
з оцінкою _________________________ 

Комісія: 				___________________ доц. Лещинський В.О.
(підпис)
___________________ доц. Лещинська І.О.
(підпис)
___________________ ст.викл. Сокорчук І.П.
(підпис)


Харків
2024 р.
Харківський національний університет радіоелектроніки

Факультет комп’ютерних наук Кафедра програмної інженерії
Спеціальність 121 – Інженерія програмного забезпечення
Курс                     3                     Семестр
Навчальна дисципліна Архітектура програмного забезпечення  

ЗАВДАННЯ 
НА КУРСОВУ РОБОТИ СТУДЕНТОВІ
Горбатенку Дмитру Олексійовичу
1. Тема проекту: Програмна система для моніторингу та управлінням мікроклімату для домашніх рослин                                                                                  .
2. Термін узгодження завдання з лабораторних робіт «_31_»_березня_ 2024 р.
3. Термін здачі завдання з лабораторних робіт «10» червня 2024 р.  
4. Вихідні дані до проекту: система що має back-end частину, розроблене програмне забезпечення для IoT або SmartDevice, розроблена front-end частина проєкту та мобільний девайс.
5. Зміст звітів з лабораторних робіт (перелік питань, що належить розробити): Проєкт у форматі Vision&Scope з аркушом завдання, back-end частина програмної системи з специфікацією та інженерними рішеннями, програмне забезпечення для IoT або SmartDevice, front-end частина та мобільна частина програмної системи з описовими діаграмами, описаними інженерними рішеннями та демо-роликами розумних 
6. Перелік графічного матеріалу (діаграми, рисунки, інтерфейси) : Back-end: UML діаграма розгортання, UML діаграма прецедентів, ER-модель даних, UML діаграма станів; програмне забезпечення для Iot або SmartDevice: UML діаграма прецедентів, UML діаграма взаємодії, UML діаграма діяльності, UML діаграма станів; Front-end: UML діаграма прецедентів, UML діаграма компонент, UML діаграма станів; Mobile: UML діаграма прецедентів, UML діаграма компонент, UML діаграма станів.


КАЛЕНДАРНИЙ ПЛАН
№	Основні етапи виконання проекту в рамках лабораторних робіт	Термін виконання
етапів	Примітка
1	Функціональна специфікація 
програмного проекту	31.03.24	
2	Проектування програмного 
проекту	05.04.24	
3	Кодування програмного проекту	20.04.24	
4	Оформлення пояснювальної 
записки	30.05.24	
5	Захист курсової роботи	08.06.24	

Дата видачі завдання «  25  »    березня     2023 р.  
Керівник ____________   ст. викл. Сокорчук І.П.
            (підпис)    

Завдання прийняв до виконання
ст.гр. ПЗПІ-21-5 ____________ Горбатенко Дмитро
                    (підпис)
 
РЕФЕРАТ


Пояснювальна записка до курсової роботи: 56 с., 13 рис., 3 табл., 4 додатки, 5 джерел.
АГРОКУЛЬТУРА, ДОМАШНІ РОСЛИНИ, ДАТЧИКИ, МАЛИЙ БІЗНЕС, АВТОМАТИЧНИЙ ПОЛИВ.

У цій курсовій роботі об'єктом дослідження є система моніторингу та управління мікрокліматом для домашніх рослин. Актуальність цього питання зумовлена зростаючою потребою в автоматизації догляду за рослинами, що дозволяє забезпечити оптимальні умови для їх росту та розвитку з мінімальними зусиллями з боку користувачів. 
Метою проекту є розробка програмної системи, яка забезпечує можливість моніторингу мікроклімату, автоматизації догляду за рослинами, а також отримання рекомендацій щодо оптимальних умов вирощування. Система включає в себе веб-завтосунок, серверну частину, IoT-пристрої та мобільнийзастосунок.
Розробка здійснюється з використанням таких технологій, як: 
-	Prisma ORM[2] та NestJS[3] для серверної частини, що базується на PostgreSQL.
-	React для створення інтерактивного веб-інтерфейсу.
-	C# і .NET для реалізації IoT-пристроїв.
-	MAUI[4] для створення кросплатформенного мобільного застосунку.
Як результат роботи, було розроблено комплексну систему, яка забезпечує автоматизований догляд за рослинами, дозволяючи користувачам підтримувати оптимальні умови для їх росту з мінімальними зусиллями. 
ЗМІСТ


ВСТУП	6
1 АНАЛІЗ ПРЕДМЕТНОЇ ОБЛАСТІ	8
1.1 Бізнес вимоги	8
1.2 Концепція рішення	14
1.3 Рамки та обмеження проекту	18
1.4 Бізнес-контекст	22
2 ПОСТАНОВКА ЗАДАЧІ	27
3 ПРОЄКТУВАННЯ БАЗИ ДАНИХ	29
3.1 Побудова ER-діаграми	29
3.2 Побудова логічної моделі бази даних на основі ER-діаграми	30
4 АРХІТЕКТУРА ПРОГРАМНОЇ СИСТЕМИ	34
4.1 Архітектура серверної частини	34
4.2 Архітектура Веб частини	38
4.3 Архітектура мобільного додатку	43
ВИСНОВКИ	49
СПИСОК ДЖЕРЕЛ	50
ДОДАТОК А	51
ДОДАТОК Б	52
ДОДАТОК В	53
ДОДАТОК Г	56
 

ВСТУП


У сучасному світі зростає інтерес до вирощування кімнатних рослин. Багато людей усвідомлюють, що рослини не тільки прикрашають житловий простір, а й мають безліч інших переваг. Вони покращують якість повітря, допомагають знизити рівень стресу, створюють затишок і піднімають настрій. Однак догляд за рослинами вимагає певних знань і регулярної уваги, що може бути непросто для людей зі щільним графіком або тих, хто часто подорожує.
Одна з головних проблем - постійний контроль за рівнем вологості ґрунту, який залежить від виду рослини та умов навколишнього середовища. Недостатня або надмірна вологість може призвести до загибелі рослини. Інша проблема - забезпечення необхідного рівня освітленості, що може бути важко взимку або за нестачі природного світла. Також важливо підтримувати стабільну температуру, особливо в мінливих погодних умовах, що впливає на здоров'я рослин.
Згідно з дослідженнями, близько 30 % людей, які вирощують кімнатні рослини, стикаються з проблемами в обслуговуванні, що призводить до загибелі рослин і фінансових втрат. Аналіз ринку показує, що наявні рішення часто дорогі, складні у використанні або обмежені за функціональністю, що робить їх непривабливими для широкого кола користувачів.
Неправильний або недостатній догляд за рослинами може призвести до їхньої загибелі, що знижує якість повітря в приміщенні і негативно позначається на емоційному стані користувачів. Це може викликати стрес і розчарування, особливо у тих, хто вважає рослини важливою частиною свого домашнього оточення.
Мета проєкту - створити доступну та ефективну програмну систему для моніторингу та управління мікрокліматом для кімнатних рослин. Основна ідея полягає в тому, щоб допомогти користувачам автоматизувати процес догляду за рослинами, забезпечуючи оптимальні умови для їхнього росту і розвитку. Це включає в себе моніторинг таких параметрів, як температура, вологість, освітлення та інші фактори, що впливають на здоров'я рослин.
Завдяки інтеграції з мобільним застосунком користувачі зможуть віддалено стежити за станом своїх рослин і отримувати рекомендації щодо догляду за ними. Це дасть змогу підвищити ефективність догляду, скоротити час і зусилля, а також підвищити задоволеність процесом вирощування.
 
1 АНАЛІЗ ПРЕДМЕТНОЇ ОБЛАСТІ
1.1 Бізнес вимоги
1.1.1 Бізнес-можливості


Існує значний попит на розробку програмної системи для моніторингу та управління мікрокліматом для домашніх рослин. Більшість існуючих рішень є або занадто дорогими, або обмеженими у функціональності. Це створює необхідність у доступному та ефективному рішенні, яке зможе задовольнити потреби широкого кола користувачів.
Для кращого розуміння ринкових можливостей та унікальних переваг нашого продукту, необхідно провести аналіз існуючих рішень. Нижче наведено порівняння нашого проєкту з трьома основними конкурентами: Parrot Flower Power, Click and Grow Smart Garden та Xiaomi Mi Flora Plant Sensor. Це допоможе визначити сильні та слабкі сторони конкурентів і підкреслити унікальні переваги нашого продукту.
Parrot Flower Power — це бездротовий сенсор для догляду за рослинами, який відслідковує основні параметри, такі як вологість ґрунту, температура, освітлення та рівень добрив. Дані передаються на мобільний застосунок, який надає рекомендації щодо догляду за рослинами.
Переваги:
-	Простота у використанні;
-	Детальна аналітика через мобільний застосунок;
-	Широка підтримка різних видів рослин.
Недоліки:
-	Висока ціна;
-	Обмежена функціональність без можливості управління параметрами мікроклімату, лише моніторинг;
-	Обмежений термін служби батареї.
Click and Grow Smart Garden — це автоматизована система для вирощування рослин у закритих приміщеннях. Вона використовує спеціальні капсули з насінням, автоматично забезпечує полив та освітлення для оптимального росту рослин.
Переваги:
-	Високий рівень автоматизації;
-	Зручний у використанні, не вимагає спеціальних знань;
-	Підходить для вирощування різних видів рослин.
Недоліки:
-	Висока вартість, особливо при купівлі спеціальних капсул з насінням;
-	Обмежена можливість налаштування параметрів;
-	Необхідність регулярного поповнення запасів капсул.
Xiaomi Mi Flora Plant Sensor — це бездротовий сенсор, який вимірює вологість ґрунту, освітлення, температуру та рівень добрив. Дані передаються на мобільний застосунок, який надає інформацію про стан рослини та рекомендації щодо догляду.
Переваги:
-	Доступна ціна;
-	Висока точність вимірювань;
-	Інтеграція з мобільним застосунком.
Недоліки:
-	Відсутність функцій управління, лише моніторинг;
-	Обмежена підтримка різних видів рослин;
-	Складність налаштування для недосвідчених користувачів.
Наш продукт матиме кілька важливих переваг над існуючими рішеннями на ринку:
-	Доступна ціна: Ми забезпечимо конкурентоспроможну ціну, що зробить продукт доступним для широкого кола користувачів;
-	Повний спектр функціональності: Наш продукт не лише моніторить параметри мікроклімату, але й дозволяє автоматично управляти ними, забезпечуючи оптимальні умови для росту рослин;
-	Інтуїтивно зрозумілий інтерфейс: Наш інтерфейс буде зручним та простим у використанні, що дозволить користувачам легко налаштовувати та використовувати систему;
-	Гнучкість і масштабованість: Система буде легко адаптуватися під різні види рослин та умови вирощування, що забезпечить високу універсальність.
Модель монетизації
Проект буде мати модель монетизації, яка включатиме:
-	Підписка на основний функціонал: Доступ до базових інструментів моніторингу та управління;
-	Продаж IoT пристроїв: Придбання сенсорів та контролерів для збору.


1.1.2 Бізнес-цілі та критерії успіху


Основною метою проекту є створення доступної та ефективної програмної системи для моніторингу та управління мікрокліматом для домашніх рослин, яка задовольнить потреби широкого кола користувачів. Для досягнення цієї мети я визначив наступні бізнес-цілі:
-	Збільшення ринкової частки: Досягти 10% частки ринку систем моніторингу та управління мікрокліматом для домашніх рослин протягом перших двох років після запуску;
-	Фінансова стабільність: Досягти окупності інвестицій у розробку продукту протягом трьох років з моменту запуску;
-	Збільшення кількості користувачів: Залучити 50,000 активних користувачів протягом першого року роботи системи;
-	Розширення асортименту: Пропонувати мінімум 10 різних аксесуарів та IoT пристроїв для різних видів рослин протягом першого року;
-	Покращення користувацького досвіду: Отримати середній рейтинг користувачів не менше 4.5 з 5 на основних платформах для відгуків.
Для оцінки успішності проекту ми визначили наступні критерії:
-	Кількість завантажень та активних користувачів: Вимірювати кількість завантажень додатка та кількість активних користувачів щомісячно. Досягнення цілі у 50,000 активних користувачів протягом першого року буде показником успішного запуску;
-	Рівень задоволеності користувачів: Оцінювати відгуки користувачів на платформах для завантаження застосунків та соціальних мережах. Середній рейтинг не менше 4.5 з 5 буде вважатися високим рівнем задоволеності;
-	Фінансові показники: Відстежувати доходи від підписок, продажів IoT пристроїв та аксесуарів, а також доходи від послуг з налаштування. Досягнення окупності інвестицій протягом трьох років є ключовим показником успішності;
-	Технічні показники: Відстежувати стабільність роботи системи, кількість технічних проблем та швидкість їх вирішення. Висока стабільність роботи та швидке вирішення технічних проблем будуть показниками якісної роботи системи;
-	Розширення асортименту: Вимірювати кількість доступних аксесуарів та IoT пристроїв. Досягнення цілі у 10 різних аксесуарів та пристроїв протягом першого року буде показником успішного розвитку продукту.
Досягнення цих бізнес-цілей та критеріїв успішності допоможе забезпечити високу конкурентоспроможність нашого продукту на ринку та задовольнити потреби користувачів у зручній та ефективній системі для догляду за домашніми рослинами.


1.1.3 Потреби клієнтів або ринку


Потреба в ефективній системі моніторингу: Користувачі шукають систему, яка забезпечить точний та ефективний моніторинг умов для росту рослин, включаючи такі параметри як вологість ґрунту, температура, освітлення та рівень добрив.
-	Зручний інтерфейс та простота використання: Користувачі хочуть мати доступ до системи з інтуїтивно зрозумілим інтерфейсом, який дозволить легко налаштовувати та контролювати умови для рослин, а також отримувати зрозумілі рекомендації;
-	Доступність та економічна ефективність: Користувачі прагнуть до рішення, яке буде доступним за ціною та пропонуватиме гнучкі моделі оплати, наприклад, підписку на основні функції або оплату за окремі IoT пристрої та аксесуари;
-	Автоматизація процесів догляду: Користувачі бажають автоматизації процесів догляду за рослинами, таких як полив, регулювання освітлення та контроль вологості, що допоможе зменшити витрати часу та зусиль;
-	Підтримка різних видів рослин: Користувачі шукають систему, яка буде підтримувати широкий спектр рослин, включаючи як декоративні, так і їстівні кімнатні рослини, та надаватиме індивідуальні налаштування для кожного виду;
-	Інтеграція з мобільними застосунками: Користувачі цінують можливість контролювати систему через мобільний застосунок, що дозволить їм отримувати дані та керувати умовами для рослин з будь-якого місця;
-	Надійність та стабільність роботи: Користувачі потребують надійної системи, яка працюватиме стабільно та без збоїв, забезпечуючи постійний моніторинг та контроль параметрів мікроклімату;
-	Гнучкість та масштабованість: Користувачі шукають рішення, яке легко адаптується під різні умови та типи рослин, та може бути масштабованим для більшого або меншого обсягу рослин в залежності від потреб;
-	Екологічність та сталий розвиток: Користувачі прагнуть вирощувати екологічно чисті рослини, зменшуючи залежність від комерційних продуктів. Система повинна підтримувати вирощування їстівних рослин, які можна вживати в їжу;
-	Оперативна підтримка клієнтів: Користувачі цінують наявність оперативної підтримки, яка може допомогти вирішити питання, що виникають під час використання системи, та надати рекомендації для покращення процесу догляду за рослинами;
-	Захист даних та конфіденційність: Користувачі прагнуть до високого рівня безпеки даних, щоб захистити свою інформацію про умови догляду та стан рослин від несанкціонованого доступу та витоку даних.
	

1.1.4 Бізнес ризики


У процесі розробки та впровадження системи для моніторингу та управління мікрокліматом для домашніх рослин існують кілька бізнес-ризиків.
-	Висока конкуренція на ринку може вплинути на наш успіх. Існуючі або нові продукти можуть мати кращі характеристики чи нижчу ціну. Для мінімізації цього ризику ми зосередимося на унікальних перевагах нашого продукту, таких як підтримка різних видів рослин, автоматизація догляду та інтеграція з мобільними застосунками;
-	Технічні проблеми під час розробки чи експлуатації системи можуть призвести до збоїв або низької якості продукту. Ми використовуватимемо перевірені технології, ретельно тестуватимемо продукт та швидко реагуватимемо на технічні проблеми;
-	Користувачі можуть не сприйняти продукт через складність у використанні чи недоліки функціональності. Ми розробимо інтуїтивно зрозумілий інтерфейс та враховуватимемо відгуки користувачів у процесі розробки;
-	Фінансова нестабільність може виникнути через невідповідність доходів і витрат. Ми розробимо реалістичний бізнес-план та контролюватимемо витрати;
-	Ризик безпеки даних та конфіденційності також є важливим. Ми впровадимо високі стандарти захисту даних, використовуватимемо сучасні методи шифрування та забезпечимо регулярний аудит безпеки системи.


1.2 Концепція рішення
1.2.1 Окреслення концепції


Ми створюємо доступну та інтуїтивно зрозумілу систему для моніторингу та управління мікрокліматом домашніх рослин. Наша мета – зробити догляд за рослинами легким і ефективним для всіх користувачів, незалежно від їхнього досвіду. Система автоматизуватиме ключові процеси догляду, такі як полив, регулювання освітлення та контроль температури, забезпечуючи оптимальні умови для росту декоративних і їстівних кімнатних рослин.
Користувачі зможуть контролювати параметри мікроклімату через мобільний застосунок, отримуючи своєчасні рекомендації та сповіщення. Система буде інтегруватися з іншими смарт-пристроями для дому, такими як системи освітлення, вентиляції та зволоження повітря, створюючи єдину екосистему для управління домашнім середовищем. Вона відповідатиме високим стандартам безпеки даних та конфіденційності, використовуючи шифрування даних та надійні методи автентифікації, що забезпечить користувачам впевненість у захищеності їхньої інформації.
Ми прагнемо створити продукт, який задовольнить потреби різних категорій користувачів, таких як зайняті професіонали, літні люди та молоді сім'ї, і сприятиме екологічному та стійкому способу життя, дозволяючи вирощувати власні їстівні рослини вдома. Наша система стане незамінним інструментом для всіх, хто цінує красу та користь від вирощування рослин вдома, надаючи можливість автоматизувати рутинні процеси та насолоджуватися результатами з мінімальними зусиллями.


1.2.2 Головна функціональність


Моніторинг мікроклімату в режимі реального часу: Функція, яка забезпечує безперервний збір даних про вологість ґрунту, температуру, освітлення та рівень добрив, з відображенням інформації в режимі реального часу у мобільному застосунку.
-	Автоматизація догляду за рослинами: Функція, що автоматизує ключові процеси догляду, такі як полив, регулювання освітлення та контроль вологості, з можливістю налаштування параметрів відповідно до потреб конкретних рослин;
-	Індивідуальні налаштування для різних видів рослин: Функція, яка дозволяє користувачам налаштовувати систему для догляду за різними видами рослин, включаючи декоративні та їстівні кімнатні рослини, з наданням рекомендацій на основі конкретних вимог кожного виду;
-	Мобільний застосунок з інтуїтивно зрозумілим інтерфейсом: Функція, яка забезпечує доступ до даних моніторингу, історії параметрів та рекомендацій щодо догляду через зручний та зрозумілий інтерфейс мобільного застосунку;
-	Інтеграція з іншими смарт-пристроями: Функція, яка дозволяє інтегрувати систему з іншими смарт-пристроями для дому, використовуючи протоколи MQTT та CoAP, створюючи єдину екосистему для управління всіма аспектами домашнього середовища;
-	Сповіщення та рекомендації: Функція, яка надає користувачам своєчасні сповіщення про зміни умов мікроклімату та рекомендації щодо необхідних дій для підтримки оптимальних умов для росту рослин;
-	Високий рівень безпеки даних: Функція, яка забезпечує високий рівень захисту даних користувачів, використовуючи сучасні методи шифрування, такі як TLS/SSL для передачі даних та AES-256 для зберігання, а також багатофакторну автентифікацію;
-	Можливість розширення функціональності: Функція, яка дозволяє додавати нові можливості та вдосконалювати існуючі функції системи в майбутньому, забезпечуючи її гнучкість та адаптивність;
-	Резервні копії даних: Функція, яка забезпечує автоматичне та ручне створення резервних копій даних користувачів у захищених хмарних сховищах або на локальних пристроях;
-	Експорт та імпорт даних та налаштувань: Функція, яка дозволяє експортувати дані про мікроклімат, налаштування системи та історію параметрів у форматах CSV, JSON та XML, а також імпортувати ці дані для швидкого відновлення налаштувань на нових пристроях;
-	Ефективні математичні методи обробки даних: Функція, яка використовує методи машинного навчання для аналізу даних та покращення рекомендацій, наприклад, класифікаційні алгоритми для ідентифікації оптимальних умов для різних видів рослин;
-	Адміністрування програмної системи: Функція, яка включає моніторинг стану системи, оновлення програмного забезпечення, управління користувачами та доступами, а також ведення логів подій.


1.2.3 Припущення та залежності


AS1. Користувачі матимуть доступ до стабільного та надійного інтернет-з'єднання для синхронізації даних між пристроями та мобільним застосунком.
AS2. Не буде значних юридичних проблем щодо збору даних, конфіденційності або дотримання правил захисту даних, що може вплинути на можливість збору та обробки інформації про рослини.
AS3. Користувачі матимуть базові технічні знання для налаштування та використання системи.
AS4. Постачальники сенсорів та інших IoT-пристроїв зможуть забезпечити своєчасну доставку та належну якість обладнання.
DP1. Доступність та якість зібраних даних буде залежати від функціональності та надійності сенсорів і контролерів. Ці пристрої можуть потребувати регулярного технічного обслуговування та оновлень для забезпечення стабільної роботи системи.
DP2. Успіх платформи залежатиме від залучення значної кількості користувачів, які будуть активно користуватися сервісом, що впливає на обсяг та якість зібраних даних та загальну цінність системи.
DP3. Інтеграція з основними мобільними платформами (iOS та Android) буде критично важливою для забезпечення безперебійної роботи мобільного застосунку.
DP4. Здатність системи надавати дані та рекомендації в режимі реального часу буде залежати від продуктивності та швидкості реагування базового програмного забезпечення і баз даних.
DP5. Успіх монетизації платформи залежить від ефективності впроваджених моделей оплати, таких як підписка та продаж IoT-пристроїв, а також від успішної інтеграції платіжних систем.
DP6. Система повинна відповідати місцевим та міжнародним регуляторним вимогам щодо захисту даних та конфіденційності користувачів, що може вплинути на її впровадження та використання.


1.3 Рамки та обмеження проекту
1.3.1 Рамки первинного випуску


Система буде розділена на чотири частини: серверна частина, веб-застосунок, мобільний застосунок та IoT пристрої. Початковий реліз проекту "Система для моніторингу та управління мікрокліматом для домашніх рослин" включатиме наступні функції:
IoT:
-	Можливість отримувати дані про вологість ґрунту, температуру, освітлення та рівень добрив від сенсорів;
-	Можливість автоматичного поливу, висадження насіння, удобрювання та налаштування різних аспектів мікроклімату;
-	Шифрування даних та автентифікація для захисту інформації, що передається.
Web:
-	Реєстрація та авторизація користувачів з використанням безпечних алгоритмів аутентифікації;
-	Керування акаунтами користувачів;
-	Відображення в режимі реального часу стану мікроклімату (вологість, температура, освітлення);
-	Налаштування автоматичного поливу та освітлення для різних видів рослин;
-	Індивідуальні налаштування для різних видів рослин з рекомендаціями щодо оптимальних умов росту;
-	Сповіщення про зміни умов мікроклімату та необхідні дії;
-	Захист даних відповідно до вимог GDPR та управління сертифікатами;
-	Локалізація для України та міжнародної англійської локалізації.
Mobile:
-	Реєстрація та авторизація користувачів з використанням безпечних алгоритмів аутентифікації;
-	Керування акаунтами користувачів;
-	Відображення в режимі реального часу стану мікроклімату (вологість, температура, освітлення);
-	Налаштування автоматичного поливу та освітлення для різних видів рослин;
-	Індивідуальні налаштування для різних видів рослин з рекомендаціями щодо оптимальних умов росту;
-	Сповіщення про зміни умов мікроклімату та необхідні дії;
-	Захист даних відповідно до вимог GDPR та управління сертифікатами;
-	Можливість резервного копіювання даних користувача.
Серверна частина:
-	Реєстрація та авторизація користувачів з використанням безпечних алгоритмів аутентифікації;
-	Керування акаунтами користувачів;
-	Збір та обробка даних з IoT пристроїв;
-	Зберігання даних про стан мікроклімату;
-	Надання даних веб-застосунку та мобільному застосунку;
-	Сповіщення користувачів про зміни умов мікроклімату;
-	Резервне копіювання даних користувача;
-	Захист даних відповідно до вимог GDPR та управління сертифікатами.
Формат даних для комунікації між частинами системи буде уніфікованим для всіх пристроїв, що спростить обробку інформації. Для економії трафіку статистичні дані будуть передаватися періодично, а не відразу після обробки сервером. Доступ до системи буде здійснюватися на основі JWT токенів.



1.3.2 Рамки наступних випусків


Майбутні релізи системи для моніторингу та управління мікрокліматом для домашніх рослин включатимуть розширення функціональності та покращення користувацького досвіду. Основні функції, які будуть додані у наступних версіях:
IoT:
-	Підтримка нових типів сенсорів для моніторингу додаткових параметрів мікроклімату;
-	Автоматичне оновлення прошивки сенсорів;
-	Розширення можливостей автоматизації догляду за рослинами, включаючи нові алгоритми для більш точного налаштування мікроклімату.
Веб-частина:
-	Детальний аналіз історичних даних для визначення трендів та оптимізації догляду за рослинами;
-	Можливість створення та збереження налаштувань для різних сезонів та умов вирощування;
-	Інтеграція з іншими смарт-системами для дому;
-	Покращення інтерфейсу для управління автоматизацією та налаштуванням сповіщень.
Мобільна частина:
-	Розширені функції сповіщень з можливістю налаштування рівня важливості.
-	Підтримка голосових команд для управління системою.
-	Інтеграція з календарем для планування догляду за рослинами.
-	Підтримка функцій для резервного копіювання даних користувачів.
Серверна частина:
-	Підтримка масштабування для обробки більшої кількості користувачів та пристроїв;
-	Покращені алгоритми для обробки та аналізу даних у реальному часі;
-	Додаткові рівні безпеки для захисту користувацьких даних, включаючи покращену шифрування та автентифікацію;
-	Локалізація системи для підтримки різних мов та регіонів.
Ці функції забезпечать подальший розвиток системи, підвищуючи її цінність та ефективність для користувачів.


1.3.3 Обмеження та винятки


Обмеження:
-	Система для моніторингу та управління мікрокліматом домашніх рослин призначена для використання в особистих та малих комерційних умовах і не передбачена для великомасштабних аграрних підприємств;
-	Робота системи залежить від стабільного та надійного інтернет-з'єднання для доступу до функцій та передачі даних. У випадку відсутності або нестабільності з'єднання продуктивність системи може бути порушена;
-	Система обмежена в підтримці автономного режиму і може потребувати регулярного підключення до Інтернету для оновлення даних та налаштувань.
Винятки:
-	Система не передбачає функцій, спрямованих на комерційне використання, і не призначена для професійних садівників або аграрних підприємств;
-	Система не призначена для керування або доступу до конфіденційної інформації користувачів, що забезпечує конфіденційність і безпеку даних користувачів;
-	Система не має можливості взаємодії з іншими екосистемами рослинного догляду, такими як системи управління сільським господарством або професійні теплиці. Вона призначена виключно для використання в домашніх умовах.
1.4 Бізнес-контекст
1.4.1 Профілі зацікавлених сторін 


Профілі зацікавлених сторін проекту наведені в таблиці 1.1.
Таблиця 1.1 – Профілі зацікавлених сторін
Зацікавлена сторона	Головна цінність	Ставлення	Головний інтерес	Обмеження
Домашні користувачі	Зручність догляду за рослинами	Зацікавлені у простому та ефективному рішенні	Здорові та красиві рослини, економія часу	Доступ до Інтернету
Малі комерційні користувачі	Підвищення ефективності догляду за рослинами	Розглядають систему як інструмент для оптимізації	Підвищення врожайності та якості продукції	Бюджетні обмеження
Розробники проекту	Отримання прибутку, досвіду, слави	Зацікавленість у успіху проекту	Набуття навичок, досягнення слави, заробіток	Недостаток досвіду, бюджетні обмеження
Інвестори	Отримання прибутку	Зацікавленість у успіху проекту та прибутку від нього	Заробіток	Грошові обмеження
Експерти з екології	Екологічна стійкість	Вважають систему інструментом для оцінки впливу господарської діяльності	Забезпечення збалансованості між господарською діяльністю та охороною довкілля	Технічні обмеження та нестача даних для повного аналізу
Технічні спеціалісти	Надійність та ефективність системи	Прагнуть забезпечити стабільну роботу системи	Підтримка та поліпшення функціональності системи	Обмежений доступ до ресурсів та технічні обмеження


1.4.2 Пріоритети проекту


Пріоритети проекту наведені в таблиці 1.2.
Таблиця 1.2 – Пріоритети проекту
Показник	Виконання (етапи)	Обмеження (граничні значення)	Ступінь свободи (допустимий діапазон)
План робіт	Випуск 1.0 має стати доступним до 01.10.2024	Випуск 1.0 не повинен перевищити дату 20.10.2024	Дати можуть коригуватись в межах +/- 2 тижнів
Функціональність	Реалізація основних функцій моніторингу та автоматизації догляду за рослинами	Вимагається включення функцій, які дозволять продукту задовольнити основні потреби користувачів	Дозволено включити додаткові функції в межах бюджету
Якість	Впровадження тестування	Повне тестування версії проекту повинне займати не більше 12 годин	Допустиме відхилення на 10% часу тестування
Ціна	Оцінка проєкту відносно ринкових цін;
Залучення івесторів	На маркетингові цілі повинно піти не більше 30% бюджету	Допустиме відхилення на 5% у витратах на маркетинг
Підтримка користувачів	Впровадження служби підтримки користувачів	Служба підтримки має працювати 24/7	Можливе відхилення у робочих годинах на початковому етапі до 20%



1.4.3 Робоче середовище


Для більшості користувачів постійний доступ до системи є вирішальним для нормального функціонування догляду за рослинами, тому передбачається максимальне зменшення часу неробочого стану серверів. Для стабільного функціонування системи передбачається використання резервного копіювання даних. Для захисту конфіденційних даних буде передбачене шифрування. Користувачі повинні бути ідентифіковані перед наданням доступу.
Для реалізації програмної системи буде використовуватись платформа NestJS з мовою програмування TypeScript для бекенду. Цей фреймворк забезпечить високий рівень продуктивності та безпеки серверної частини. Для роботи з базою даних буде використана PostgreSQL, яка забезпечить надійне зберігання та швидкий доступ до даних.
Для фронтенду буде використовуватись React разом з Vite[5]. Це забезпечить швидку розробку та високу продуктивність веб-застосунку, дозволяючи користувачам легко керувати системою через браузер.
Мобільний застосунок буде створений з використанням MAUI для забезпечення кросплатформеності та зручного користувацького досвіду на мобільних пристроях.
Система управління базою даних буде базуватися на PostgreSQL, що забезпечить надійне зберігання даних та підтримку складних запитів. Для роботи з базою даних та перетворення змінних всередині програми буде використовуватись сучасна Prisma ORM та інші інструменти, що забезпечать ефективну роботу з даними.
Для забезпечення надійності та безпеки системи передбачено використання резервного копіювання даних, шифрування конфіденційної інформації та ідентифікації користувачів перед наданням доступу. Це забезпечить високий рівень захисту даних та стабільну роботу системи.
Конкретні заходи:
-	Механізми аутентифікації та авторизації: Використання JWT токенів для забезпечення безпеки доступу до системи та контролю прав доступу користувачів;
-	Резервне копіювання та шифрування: Використання сучасних алгоритмів шифрування, таких як AES, для захисту даних. Автоматизоване резервне копіювання даних з використанням технологій, таких як AWS S3 або Google Cloud Storage, для забезпечення надійного зберігання;
-	Моніторинг та логування: Використання Elasticsearch та Kibana для відстеження та аналізу дій користувачів та системних подій у реальному часі, що дозволить швидко виявляти та вирішувати проблеми та інциденти.
Обґрунтування вибору технологій:
-	NestJS та TypeScript: Забезпечують високу продуктивність, безпеку та структурованість серверної частини;
-	React та Vite: Прискорюють розробку та підвищують продуктивність веб-застосунку, що дозволяє швидко створювати сучасний інтерфейс користувача;
-	MAUI для мобільного застосунку: Забезпечує кросплатформену підтримку, дозволяючи створювати застосунки для iOS та Android без написання окремого коду для кожної платформи;
-	PostgreSQL та Prisma ORM: Надають надійне зберігання даних, підтримку складних запитів та легке управління схемою бази даних.
Ці заходи забезпечать високий рівень захисту даних, стабільну роботу системи та зручність для користувачів, відповідаючи сучасним вимогам до програмних рішень для управління мікрокліматом домашніх рослин.

 
2 ПОСТАНОВКА ЗАДАЧІ


Результатом аналізу предметної області виявлено зростаючу потребу в автоматизованих рішеннях для догляду за домашніми рослинами. Метою цієї курсової роботи є розробка інтегрованої програмної системи, яка забезпечить зручний моніторинг та управління мікрокліматом для домашніх рослин. Це підвищить ефективність догляду за рослинами, дозволяючи користувачам оптимально використовувати час та ресурси для підтримки здоров'я та краси своїх рослин.
Після реалізації проекту користувачі матимуть можливість виконувати такі дії:
-	реєстрація та авторизація до програмної системи;
-	моніторинг стану своїх рослин у реальному часі (вологість ґрунту, температура, освітлення, рівень добрив);
-	налаштування автоматичного поливу, освітлення та інших параметрів мікроклімату;
-	отримання рекомендацій щодо догляду за рослинами на основі аналізу зібраних даних;
-	налаштування індивідуальних параметрів для різних видів рослин;
-	отримання сповіщень про необхідні дії (наприклад, полив або внесення добрив).
Для адміністратора буде реалізований наступний функціонал:
-	реєстрація та вхід у систему від імені адміністратора;
-	управління даними користувачів системи;
-	перегляд, додавання, редагування та видалення інформації про рослини та сенсори;
-	управління налаштуваннями автоматизації для користувачів;
-	експорт та імпорт даних системи;
-	експорт та імпорт сертифікатів системи;
-	моніторинг та логування системних подій для забезпечення безпеки та стабільності роботи системи.
Система має підтримувати повноцінну локалізацію, що включає:
-	багатомовний інтерфейс, який забезпечує зрозуміле відображення інформації для користувачів з різних культур та націй;
-	коректне відображення дат, часу та числових даних у відповідних форматах;
-	можливість введення даних у зручному для користувача форматі.
Таким чином, реалізація проекту дозволить створити доступну та ефективну програмну систему для догляду за домашніми рослинами, забезпечуючи високий рівень зручності та функціональності для кінцевих користувачів. 
3 ПРОЄКТУВАННЯ БАЗИ ДАНИХ
3.1 Побудова ER-діаграми


Для бази даних була створена ER діаграма (див. рис. 3.1), яка стала основою для створення самої бази даних та її подальшого використання. Вона складається з декількох основних таблиць: Користувачів, Рослин, Даних, Типів рослин, Ролей та Токенів.

 
Рисунок 3.1 – ER-діаграма бази даних
На діаграмі можна побачити такі зв’язки:
–	User –> Plant – Один для багатьох: Один користувач може мати безліч рослин, кожна з яких має свої параметри та дані моніторингу.
–	Plant -> Data – Один для багатьох: Кожна рослина може мати багато записів даних про мікроклімат, такі як вологість, температура, освітлення тощо.
–	User -> Token – Один для багатьох: Один користувач може мати багато токенів для доступу до системи.
–	Plant -> Plant Types – Багато до одного: Кожна рослина має один тип, але один тип може мати багато рослин.
–	User -> Roles – Багато до одного: Один користувач може мати одну роль, але одна роль може бути призначена багатьом користувачам.
Користувачі можуть додавати свої рослини до системи та моніторити їх стан за допомогою даних з різних сенсорів. Адміністратори мають можливість керувати всіма аспектами системи.
База даних повністю контролюється бібліотекою Prisma, яка дозволяє абстрагуватися від прямої взаємодії з базою даних. Це забезпечує зручність та безпеку роботи з даними.
Наразі база даних розміщена на хмарі, а дані для підключення до неї зберігаються у файлі .env.


3.2 Побудова логічної моделі бази даних на основі ER-діаграми


Для того щоб база даних рахувалася нормальною, варто усунути можливі зв’язки «багато-до-багатьох» між сутностями. Проаналізувавши вже спроектовану модель, можна побачити, що таких зв’язків немає. Тому перейдемо до побудови логічної моделі бази даних на основі ER-діаграми.
Отже, у логічній моделі бази даних будуть представлені такі сутності:
-	Користувачі (User);
-	Токени (Token);
-	Рослини (Plant);
-	Дані (Data);
-	Типи рослин (PlantType).
Створимо таблицю користувачів (User). Вона буде містити у собі такі атрибути:
-	id (первинний ключ),
-	email,
-	password,
-	provider,
-	createdAt,
-	updatedAt,
-	roles (масив),
-	isBlocked.
Перевіримо таблицю User на відповідність нормалізації:
-	усі атрибути атомарні: містять лише одне значення, а не множину;
-	відсутність повторюваності даних;
-	усі неключові атрибути залежать від первинного ключа.
Отже, таблиця задовольняє першій, другій і третій нормальній формі.
Створимо таблицю токенів (Token). Вона буде містити у собі такі атрибути:
-	token (первинний ключ),
-	exp,
-	userId (зовнішній ключ для зв’язку «багато-до-одного» з таблицею User),
-	userAgent.
Перевіримо таблицю Token на відповідність нормалізації:
-	усі атрибути атомарні: містять лише одне значення, а не множину;
-	відсутність повторюваності даних;
-	усі неключові атрибути залежать від первинного ключа.
Отже, таблиця задовольняє першій, другій і третій нормальній формі.
Створимо таблицю рослин (Plant). Вона буде містити у собі такі атрибути:
-	id (первинний ключ),
-	name,
-	plantTypeId (зовнішній ключ для зв’язку «багато-до-одного» з таблицею PlantType),
-	userId (зовнішній ключ для зв’язку «багато-до-одного» з таблицею User),
-	plantingDate,
-	currentStatus,
-	soilType.
Перевіримо таблицю Plant на відповідність нормалізації:
-	усі атрибути атомарні: містять лише одне значення, а не множину;
-	відсутність повторюваності даних;
-	усі неключові атрибути залежать від первинного ключа.
Отже, таблиця задовольняє першій, другій і третій нормальній формі.
Створимо таблицю даних (Data). Вона буде містити у собі такі атрибути:
-	id (первинний ключ),
-	humidity,
-	temperature,
-	light,
-	nutrientLevel,
-	plantId (зовнішній ключ для зв’язку «багато-до-одного» з таблицею Plant),
-	timestamp.
Перевіримо таблицю Data на відповідність нормалізації:
-	усі атрибути атомарні: містять лише одне значення, а не множину;
-	відсутність повторюваності даних;
-	усі неключові атрибути залежать від первинного ключа.
Отже, таблиця задовольняє першій, другій і третій нормальній формі.
Створимо таблицю типів рослин (PlantType). Вона буде містити у собі такі атрибути:
-	id (первинний ключ),
-	typeName,
-	description,
-	optimalHumidity,
-	optimalTemperature,
-	optimalLight.
-	Перевіримо таблицю PlantType на відповідність нормалізації:
-	усі атрибути атомарні: містять лише одне значення, а не множину;
-	відсутність повторюваності даних;
-	усі неключові атрибути залежать від первинного ключа.
Отже, таблиця задовольняє першій, другій і третій нормальній формі.
За результатами проектування таблиць та зв’язків майбутньої бази даних, отримано її логічну схему (див. додаток А.1).
 
4 АРХІТЕКТУРА ПРОГРАМНОЇ СИСТЕМИ
4.1 Архітектура серверної частини


У системі для моніторингу та управління мікрокліматом для домашніх рослин є три типи користувачів: Адміністратори, Користувачі та Зовнішні інтегратори. Користувачі взаємодіють з веб-частиною та мобільним застосунком для моніторингу та управління своїми рослинами. Адміністратори взаємодіють з веб-частиною для адміністрування системи, включаючи створення, редагування та видалення даних користувачів та налаштувань системи, а також управління резервними копіями даних. Зовнішні інтегратори використовують API для доступу до системи та інтеграції з іншими смарт-системами.
Користувачі можуть виконувати такі дії:
-	Реєстрація та авторизація у системі;
-	Додавання, оновлення та видалення даних про свої рослини через веб-застосунок;
-	Отримання статистики та рекомендацій щодо оптимальних умов для вирощування рослин;
-	Налаштування параметрів автоматизації, таких як полив та освітлення;
-	Перегляд та управління станом рослин у режимі реального часу через мобільний застосунок;
-	Отримання сповіщень та рекомендацій через мобільний застосунок.
Адміністратори мають такі можливості:
-	Створення, модифікування та видалення даних у системі;
-	Управління обліковими записами користувачів;
-	Забезпечення підтримки та налаштування системи для забезпечення її стабільної роботи;
-	Перегляд загальної статистики використання системи;
-	Генерування звітів;
-	Управління резервними копіями даних, забезпечуючи їх створення та відновлення.
Зовнішні інтегратори можуть використовувати API для:
-	Доступу до системи від імені організацій;
-	Інтеграції з іншими смарт-системами;
-	Отримання даних про стан рослин для подальшого аналізу або інтеграції.
Для повного ознайомлення із системою була створена UML діаграма прецедентів (додаток Б.1), яка показує взаємодію різних типів користувачів із системою. Ця діаграма допомагає визначити функціональні потреби та взаємодію користувачів із системою.
Сервер написаний на Nest.js, дуже гнучкому фреймворку JavaScript, який дозволяє писати код у дуже зручних для користувача модулях і має базову підтримку фреймворку для тестування Jest. Він працює в середовищі Node, що є дуже важливим для роботи коду.
В якості бази даних використовується PostgreSQL, доступ до якої з серверного застосунку здійснюється за допомогою технології Prisma, дуже зручної бібліотеки, яка дозволяє створювати базу даних і керувати нею за допомогою моделей і класів, а також має власну мову написання схем, яка називається Prisma Schema.
Для більш детальної візуалізації використаних технологій була розроблена діаграма реалізації (див. рис. 4.2).

 
Рисунок 4.2 – Діаграма розгортання серверної частини програмної системи

Для демонстрації та тестування API використовується OpenApi Swagger, це зручний інструмент для тестування API, що візуально зображає наявні кінцеві точки та надає приклади пераметрів для тіла запиту. Для забезпечення безпеки даних використовується захищений протокол HTTPS, щогарантує безпекупередачі даних по мережі.
Шифрування чутливих даних, таких як паролі та токени авторизації я реалізовував з використанням бібліотеки bcrypt[1], ця бібліотека дозволяє шифрувати дані з використанням солі для захисту від атак радужної таблиці (rainbow attack) без необхідності самостійного зберігання солі в своїй таблиці, замість цього інформація для перевірки паролю зберігається безпосередньо в результуючому хешу. Для передачі та отримування використовується властивості REST API голови запиту та печива запиту. При отриманні запиту сервер перевіряє валідність за допомогою Guard які виконують код перед обробки запитом.
Серверний застосунок побудований за принципами модульної архітектури (Modular architecture), де кожен модуль складається з певної кількості шарів. Кожен шар має свої функції:
-	Controller: Приймає запити від клієнтів;
-	Service: Обробляє ці запити;
-	Repository: Відправляє та отримує інформацію з бази даних.
В архітектуру також був доданий Guard, який перевіряє запити на валідність інформації, наприклад, перевіряє термін дії токену та інші аспекти. Використовуються інтерцептори (Pipeline Interceptors), які перехоплюють запити та можуть їх блокувати, не допускаючи непідходящі дані до контролера. При відправленні відповіді використовується інтерцептор, який видаляє непідходящі дані, такі як паролі та інше.
Архітектуру серверного застосунку можна побачити на рисунку в кінці підрозділу (див. рис. 4.3). Приклади частин коду серверного застосунку представлені у додатку В.

 
Рисунок 4.3 – Діаграма пакетів серверної частини програмної системи
4.2 Архітектура Веб частини


 Клієнтської частина передбачає два типи акторів: адміністратор системи, що має доступ до всіх функцій керування даними та процесам, та звичайний клієнт який має доступ лише до передбачених частин системи.
Потреби звичайних користувачів:
-	Перегляд рослин: Користувачі можуть переглядати інформацію про наявні рослини, включаючи їх поточний стан, характеристики та історію догляду.
-	Додавання рослин: Користувачі повинні мати можливість додавати нові рослини, заповнюючи необхідну інформацію про них.
-	Редагування та видалення рослин: Користувачі можуть редагувати існуючі дані про рослини або видаляти їх з системи.
-	Завантаження даних: Користувачі повинні мати можливість завантажувати дані про рослини на свій пристрій для подальшого використання.
-	Взаємодія з організаціями: Якщо користувач є частиною організації, він може редагувати дані своєї організації та взаємодіяти з її рослинами.
Потреби адміністраторів:
-	Моніторинг системи: Адміністратори можуть переглядати стан всієї системи, включаючи інформацію про всі організації, користувачів та рослини.
-	Адміністрування даних: Адміністратори можуть створювати, редагувати та видаляти користувачів, організації та рослини.
-	Управління доступом: Адміністратори можуть керувати доступом користувачів до системи, включаючи зміну ролей та видалення облікових записів.
-	Резервне копіювання: Адміністратори повинні мати можливість створювати та відновлювати резервні копії даних системи.
Взаємодію адміністратора та простого користувача системи з клієнтською частиною програмної системи зображено на діаграмі нижче (див. рис 4.3).
 
Рисунок 4.3 – Діаграма прецедентів клієнтської частини програмної системи

Для створення клієнтської частини системи було обрано мову програмування TypeScript разом з технологією React, що забезпечує високу швидкість розробки та зручність у використанні.
Для реалізації інтерфейсних елементів використовувалася бібліотека Tailwind, що надає можливість швидкого написання стилів безпосередньо в компонентах.
Для впровадження локалізації інтерфейсу була використана бібліотека i18next[6], яка дозволяє легко і ефективно реалізувати багатомовний інтерфейс та забезпечує зручний механізм перекладу текстових рядків. Для інтернаціоналізації дат використовується вбудований тип Date у JavaScript, що дозволяє відображати дати у форматі, відповідному до регіону користувача.
Для створення сторінок і швидкого перемикання між ними на веб-сайті був використаний пакет react-router-dom, який забезпечує можливість реактивної навігації та управління маршрутами на веб-сторінці, а також історією цих маршрутів.
Для розгортання веб-застосунку був використаний інструмент компіляції Vite, який дозволяє легко налаштовувати середовище розробки та підтримує автоматичне оновлення в реальному часі.
На рисунку 4.4 представлено діаграму, що ілюструє використані пакети.

 
Рисунок 4.4 – Діаграма пакетів клієнтської частини програмної системи

Проект спроектований з використанням архітектури «Module Architecture». Ідея архітекрури полягаю у написанні перевикористовуємих модулів, які будуть інкапсулювати в собі ізольовану функціональність і давати інтерфейс для її використання з усіх місць проекту. Проект має такі директорії: Components, Lib, Store. 
Для більш детальної візуалізації архітектури системи було розроблено діаграму компонентів (див. рис. 4.5).

 
Рисунок 4.5 – Діаграма компонентів клієнтської частини програмної системи

Початок роботи користувача з програмною системою починається з форми реєстрації чи логіну, де користувач при першому відвідуванні веб-сайту має створити свій профіль з використанням персональної електронної пошти та надійного паролю. Піля успішної авторизаці та аутентифікації користувачеві буде передано accessToken, який буде внутрішньо використано застосунком для виконання захищених запитів до нашого API.
Після отримання доступу до платформи користувач має можливість моніторити статус своїх рослин, переглядати дані що до статусу рослин, передані з IoT-пристрою, переглядати агреговані статистичні дані для кожноїрослини, та при потребі змінювати чи видаляти дані для кожної рослини. 
Адміністратор має доступ до повного контролю над всіми аспектами системи. Він може редагувати, додавати, та видаляти дані для рослин усіх користувачів системи, та самими даними користувачів. Також адмінмає повний доступ до управління резервними копіями системи (створення, завантаження та застосування резервних копій).
Для більш детальної візуалізації взаємодії користувачів з клієнтської частиною системи було розроблено діаграму взаємодії (див. рис. 4.6).
Таким чином, за допомогою діаграм пакетів, компонентів та взаємодії було визначено основні технології та архітектуру веб додатку системи.

 
Рисунок 4.6 – Діаграма взаємодії клієнтської частини програмної системи
 
4.3 Архітектура мобільного додатку


Мобільна частина реалізована з використанням MAUI, що дозволяє створювати застосунки для більшості популярних платформ без необхідності написання окремого коду для кожної з них. Для розробки використовувався шаблон MVVM, який розділяє відображення (View), бізнес-логіку (Model) та посередник між ними (ViewModel). Це сприяє модульності та зручності в управлінні інтерфейсом користувача. Проте, ViewModel було написано з нуля, оскільки інші UI частини системи використовують різні технології.


4.3.1	Шар мобільного застосунку


Цей шар використовує фреймворк MAUI для написання коду, який у подальшому компілюється у код, специфічний для конкретної платформи. Шар складається з View, написаних за допомогою мови розмітки XAML, та ViewModel, які реалізують шаблон "Producer-Consumer" з використанням інтерфейсу INotifyPropertyChanged та бібліотеки CommunityToolkit, що полегшує роботу з цим інтерфейсом. Цей шар взаємодіє з шаром зв'язку з API, забезпечуючи доступ до даних і функціональності системи.


4.3.2	Шар зв'язку з API


Цей шар відповідає за реалізацію методів для з'єднання з API, включаючи методи для створення моделей, авторизації та інших операцій. Він використовує конфігуровані сутності, що створюються за допомогою ServiceProvider.
4.3.3	Локалізація


Локалізація здійснюється за допомогою файлів ресурсів і ResourceManager. Файли ресурсів додаються до маніфесту програми, а ResourceManager вибирає потрібний файл на основі додаткової інформації, наприклад, MobileResources.en, де en означає локалізацію.


4.3.4	Загальна інформація


Всі сервіси реалізують абстракції, що забезпечує дотримання принципу SOLID Dependency Inversion і сприяє реалізації Dependency Injection. Це спрощує створення сторінок та їх додавання без необхідності змінювати існуючу розмітку основного застосунку. Основні компоненти мобільной частини програмної системи можна переглянути на рис. 4.7.

 
Рисунок 4.7 – Діаграма компонентів мобільної програмної частини

Для розуміння ситуацій використання програмної системи була сформована діаграма прецедентів (див. рис. 4.8).
 
Рисунок 4.8 – Діаграма прецедентів мобільної програмної частини

В цілому мобільна частина проекту складається з двох пакетів: Mobile (основна функціональність) та Mobile.ApiService. Для візуального зображення була створена діаграма пакетів мобільної частини проєкту (див. рис. 4.9).
 
Рисунок 4.9 – Діаграма пакетів мобільної програмної частини

Була також створена діаграма станів (див. рис. 4.10), для відображення станів, в яких може бути застосунок. 

 
Рисунок 4.10 – Діаграма станів мобільної частини програмної системи

Таким чином, було визначено технології й архітектуру мобільной частини програмної системи.
 

ВИСНОВКИ


При виконанні курсової роботи було створено складну програмну систему, що складається з серверної частини, Smart device частини, веб та мобільного застосуноків. Для реалізації цієї системи було використано такі технології: NestJS, Typescript, PrismaORM і PostgreSQL для розробки RESTful API; React для створення веб-застосунку та Vite для його збірки з використанням i18n для локалізації; MAUI для розробки мобільного застосунку; а також SpectreConsole для розробки консольного застосунку, що імітує роботу розумного пристрою.
В проєктах написаних на платформі .NET (мобільний та IoT застосунки) використовувалась шарова монолітна архітектура, що представляє собою три шари:  шар відображення (UI), шар бізнес логіки (BLL)  та шар доступу до даних(DAL). У деяких частинах проекту шари могли бути змінені для доступу до даних або додані з додатковою функціональністю, наприклад, налаштування Smart device за допомогою мобільного додатку. Шар представлення мобільного додатку був реалізований за архітектурою MVVM. Веб-застосунок розділений на шари представлення та сервіси локалізації, маршрутизації та зв’язку з API.
Система дає змогу керувати пристроями системи через інтернет або застосунок для мобільного телефону, відображаючи статистику, отриману внаслідок автоматичного введення даних із сенсорів. Система має давати змогу змінювати конфігурацію даних системи і забезпечувати захист даних за допомогою шифрування. Система локалізована англійською та українською мовами.
 
СПИСОК ДЖЕРЕЛ


1.	Bcrypt npm package. A library to help you hash passwords. URL: https://github.com/kelektiv/node.bcrypt.js  (дата звернення: 02.06.2024).
2.	Prisma. Next-generation Node.js and TypeScript ORM. URL: https://www.prisma.io/orm (дата звернення: 02.06.2024).
3.	Nest.Js Modular Architecture. URL: https://docs.nestjs.com/modules (дата звернення: 02.06.2024).
4.	What is .NET MAUI? Дата звернення: 02.06.2024. Посилання: https://learn.microsoft.com/en-us/dotnet/maui/what-is-maui?view=net-maui-8.0
5.	Офіційний сайт Vite. Дата звернення: 02.06.2024. Посилання: https://vitejs.dev/
6.	Документація і18next. Дата звернення: 02.06.2024. Посилання: https://www.i18next.com/ 
 
ДОДАТОК А
Логічна схема бази даних

 
Рисунок А.1 – Логічна схема бази даних
ДОДАТОК Б
Діаграма прецедентів

 
Рисунок Б.1 – Діаграма прецедентів 
ДОДАТОК В

В цьому додатку надані описові діаграми та REST специфікація для серверної частини проєкту.

Назва	Метод	Шлях	Тіло
Sign Up	POST	/api/auth/signup	{email, password, nickname}
Login	POST	/api/auth/login	{email, password}
Logout	GET	/api/auth/logout	
Refresh Tokens	GET	/api/auth/refresh-tokens	
Google Auth	GET	/api/auth/google	
Google Auth Callback	GET	/api/auth/google/callback	
Success Google	GET	/api/auth/success-google	{token}
Get Current User	GET	/api/user	
Get User by ID or Email	GET	/api/user/:idOrEmail	

Delete User	DELETE	/api/user/:id	
Update User	PATCH	/api/user	{email, password, nickname, isBlocked}
Get All Plant Types	GET	/api/plant-types	


Таблиця 1 (продовження)
Get Plant Type by ID	GET	/api/plant-types/:id	
Create Plant Type	POST	/api/plant-types	{typeName, description, optimalHumidity, optimalTemperature, optimalLight}
Update Plant Type	PATCH	/api/plant-types/:id	{typeName, description, optimalHumidity, optimalTemperature, optimalLight}
Delete Plant Type	DELETE	/api/plant-types/:id	
Get All Plants	GET	/api/plants	
Get Plant by ID	GET	/api/plants/:id	
Create Plant	POST	/api/plants	{name, plantTypeId, userId, plantingDate, currentStatus, soilType}
Update Plant	PATCH	/api/plants/:id	{name, plantTypeId, userId, plantingDate, currentStatus, soilType}
Delete Plant	DELETE	/api/plants/:id	
Get All Plant Data	GET	/api/plant-data	
Get Plant Data by ID	GET	/api/plant-data/:id	

Таблиця 1 (продовження)
Create Plant Data	POST	/api/plant-data	{humidity, temperature, light, nutrientLevel, plantId, timestamp}
Update Plant Data	PATCH	/api/plant-data/:id	{humidity, temperature, light, nutrientLevel, timestamp}
Delete Plant Data	DELETE	/api/plant-data/:id	
Get Average Parameters	GET	/api/plant-data/average/:plantId	
Get Parameter Trends	GET	/api/plant-data/trends/:plantId	
Get Parameter Correlations	GET	/api/plant-data/correlations/:plantId	
Create Backup	POST	/api/backup/create	
Restore Backup	POST	/api/backup/restore	{fileName}
Download Backup	GET	/api/backup/download/:folderName	

 
ДОДАТОК Г

Перевірка на плагіат

